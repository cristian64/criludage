/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PanelPropuestas.java
 *
 * Created on 27-ene-2011, 22:34:09
 */

package aplicaciondesguace;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author DAMIAN-MACBOOK
 */
public class PanelEmpleados extends javax.swing.JPanel {

    /** Creates new form PanelPropuestas */
    public PanelEmpleados(FormBase b,Empleado e) {
        initComponents();

        // guardo el formulario base
        base = b;
        empleado=e;

        // anyado el evento doble click a las filas de la tabla
        tablaEmpleados.addMouseListener(new MouseAdapter() {
        public void mouseReleased(MouseEvent e){
            if(e.getClickCount()>=2){
                // al hacer doble click, se abre el panel para ver la solicidtud
                //base.addPanel(new PanelVerSolicitud(base,solicitudes.get(tablaSolicitudes.getSelectedRow())));
            }
        }
        });

        // creo un timer que refresca las solicitudes cada 20 segundos
        Timer timer = new Timer (20000, new ActionListener ()
        {
            public void actionPerformed(ActionEvent e)
            {
                Refrescar();
             }
        });

        // comienza el timer
        timer.start();

        // relleno la tabla
        Refrescar();
    }

    public void Refrescar(){




        // obtengo el modelo de la tabla
        DefaultTableModel temp = (DefaultTableModel) tablaEmpleados.getModel();

        // obtengo la fila seleccionada
        int fila = tablaEmpleados.getSelectedRow();

        // borro todas las filas
        for(int i=temp.getRowCount()-1;i>=0;i--){
            temp.removeRow(i);
        }

        // obtengo las solicitudes
        empleados = empleado.obtenerTodos();

        // las meto en la tabla
        for(int i=0;i<empleados.size();i++){
            procesarEmpleado(empleados.get(i));
        }
        // restauro la fila seleccionada
        if(fila != -1){
            tablaEmpleados.setRowSelectionInterval(fila, fila);
        }
    }

    private void procesarEmpleado(Empleado emp){

        // obtengo el modelo de la tabla
        DefaultTableModel temp = (DefaultTableModel) tablaEmpleados.getModel();
        // creo el objeto a insertar
        Object nuevo[]= {emp.getId(),emp.getUsuario(),emp.getNombre(),emp.getCorreoElectronico(),emp.getNif(),emp.isAdministrador()};
        // lo inserto
        temp.addRow(nuevo);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        etiqTitulo = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaEmpleados = new javax.swing.JTable();

        etiqTitulo.setFont(new java.awt.Font("Tahoma", 1, 18));
        etiqTitulo.setText("Empleados");

        tablaEmpleados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID ", "Nombre de usuario", "Nombre completo", "Correo electrónico", "NIF", "¿Es administrador?"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaEmpleados);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(etiqTitulo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 747, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 747, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(etiqTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel etiqTitulo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaEmpleados;
    // End of variables declaration//GEN-END:variables

    private FormBase base;
    private Empleado empleado;
    private ArrayList<Empleado> empleados;
}
